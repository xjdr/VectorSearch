// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vsearch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vsearch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vsearch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vsearch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vsearch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vsearch_2eproto;
namespace vsearch {
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class ResponseBody;
class ResponseBodyDefaultTypeInternal;
extern ResponseBodyDefaultTypeInternal _ResponseBody_default_instance_;
class RetCode;
class RetCodeDefaultTypeInternal;
extern RetCodeDefaultTypeInternal _RetCode_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class Tensor;
class TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
}  // namespace vsearch
PROTOBUF_NAMESPACE_OPEN
template<> ::vsearch::Index* Arena::CreateMaybeMessage<::vsearch::Index>(Arena*);
template<> ::vsearch::ResponseBody* Arena::CreateMaybeMessage<::vsearch::ResponseBody>(Arena*);
template<> ::vsearch::RetCode* Arena::CreateMaybeMessage<::vsearch::RetCode>(Arena*);
template<> ::vsearch::SearchRequest* Arena::CreateMaybeMessage<::vsearch::SearchRequest>(Arena*);
template<> ::vsearch::SearchResponse* Arena::CreateMaybeMessage<::vsearch::SearchResponse>(Arena*);
template<> ::vsearch::Tensor* Arena::CreateMaybeMessage<::vsearch::Tensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vsearch {

enum Code : int {
  kOk = 0,
  kEnd = 1,
  kNotFound = 2,
  kCorruption = 3,
  kNotSupported = 4,
  kInvalidArgument = 5,
  kIOError = 6,
  kSnapshotNotExists = 7,
  kWrongShard = 8,
  kUnknownError = 9,
  kClientError = 10,
  kEnsembleError = 11,
  kWriterAlreadyExistsError = 12,
  kReplicationError = 13,
  kRetryableError = 14,
  kTimeoutError = 15,
  kOpTooLarge = 16,
  kQueryFailed = 17,
  Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Code_IsValid(int value);
constexpr Code Code_MIN = kOk;
constexpr Code Code_MAX = kQueryFailed;
constexpr int Code_ARRAYSIZE = Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Code_descriptor();
template<typename T>
inline const std::string& Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Code_descriptor(), enum_t_value);
}
inline bool Code_Parse(
    const std::string& name, Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Code>(
    Code_descriptor(), name, value);
}
// ===================================================================

class RetCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vsearch.RetCode) */ {
 public:
  RetCode();
  virtual ~RetCode();

  RetCode(const RetCode& from);
  RetCode(RetCode&& from) noexcept
    : RetCode() {
    *this = ::std::move(from);
  }

  inline RetCode& operator=(const RetCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetCode& operator=(RetCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetCode* internal_default_instance() {
    return reinterpret_cast<const RetCode*>(
               &_RetCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RetCode& a, RetCode& b) {
    a.Swap(&b);
  }
  inline void Swap(RetCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetCode* New() const final {
    return CreateMaybeMessage<RetCode>(nullptr);
  }

  RetCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetCode& from);
  void MergeFrom(const RetCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vsearch.RetCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vsearch_2eproto);
    return ::descriptor_table_vsearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .vsearch.Code state = 1;
  void clear_state();
  ::vsearch::Code state() const;
  void set_state(::vsearch::Code value);
  private:
  ::vsearch::Code _internal_state() const;
  void _internal_set_state(::vsearch::Code value);
  public:

  // @@protoc_insertion_point(class_scope:vsearch.RetCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vsearch_2eproto;
};
// -------------------------------------------------------------------

class Tensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vsearch.Tensor) */ {
 public:
  Tensor();
  virtual ~Tensor();

  Tensor(const Tensor& from);
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor& operator=(Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor* New() const final {
    return CreateMaybeMessage<Tensor>(nullptr);
  }

  Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vsearch.Tensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vsearch_2eproto);
    return ::descriptor_table_vsearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kDataFieldNumber = 5,
    kIdFieldNumber = 1,
    kNFieldNumber = 2,
    kMetadataSizeFieldNumber = 4,
    kSizeFieldNumber = 6,
  };
  // bytes metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 n = 2;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 metadata_size = 4;
  void clear_metadata_size();
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_size() const;
  void set_metadata_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_metadata_size() const;
  void _internal_set_metadata_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 6;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vsearch.Tensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  ::PROTOBUF_NAMESPACE_ID::int32 metadata_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vsearch_2eproto;
};
// -------------------------------------------------------------------

class Index :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vsearch.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }
  inline void Swap(Index* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const final {
    return CreateMaybeMessage<Index>(nullptr);
  }

  Index* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Index>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Index* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vsearch.Index";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vsearch_2eproto);
    return ::descriptor_table_vsearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // repeated .vsearch.Tensor index = 1;
  int index_size() const;
  private:
  int _internal_index_size() const;
  public:
  void clear_index();
  ::vsearch::Tensor* mutable_index(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::Tensor >*
      mutable_index();
  private:
  const ::vsearch::Tensor& _internal_index(int index) const;
  ::vsearch::Tensor* _internal_add_index();
  public:
  const ::vsearch::Tensor& index(int index) const;
  ::vsearch::Tensor* add_index();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::Tensor >&
      index() const;

  // @@protoc_insertion_point(class_scope:vsearch.Index)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::Tensor > index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vsearch_2eproto;
};
// -------------------------------------------------------------------

class ResponseBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vsearch.ResponseBody) */ {
 public:
  ResponseBody();
  virtual ~ResponseBody();

  ResponseBody(const ResponseBody& from);
  ResponseBody(ResponseBody&& from) noexcept
    : ResponseBody() {
    *this = ::std::move(from);
  }

  inline ResponseBody& operator=(const ResponseBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBody& operator=(ResponseBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseBody* internal_default_instance() {
    return reinterpret_cast<const ResponseBody*>(
               &_ResponseBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseBody& a, ResponseBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseBody* New() const final {
    return CreateMaybeMessage<ResponseBody>(nullptr);
  }

  ResponseBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseBody& from);
  void MergeFrom(const ResponseBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vsearch.ResponseBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vsearch_2eproto);
    return ::descriptor_table_vsearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kDistFieldNumber = 1,
    kVIDFieldNumber = 2,
  };
  // string metadata = 3;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // float dist = 1;
  void clear_dist();
  float dist() const;
  void set_dist(float value);
  private:
  float _internal_dist() const;
  void _internal_set_dist(float value);
  public:

  // int32 VID = 2;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vsearch.ResponseBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  float dist_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vsearch.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vsearch.SearchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vsearch_2eproto);
    return ::descriptor_table_vsearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 2,
    kKFieldNumber = 1,
  };
  // .vsearch.Tensor q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::vsearch::Tensor& q() const;
  ::vsearch::Tensor* release_q();
  ::vsearch::Tensor* mutable_q();
  void set_allocated_q(::vsearch::Tensor* q);
  private:
  const ::vsearch::Tensor& _internal_q() const;
  ::vsearch::Tensor* _internal_mutable_q();
  public:

  // int32 k = 1;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vsearch.SearchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vsearch::Tensor* q_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vsearch.SearchResponse) */ {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vsearch.SearchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vsearch_2eproto);
    return ::descriptor_table_vsearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .vsearch.ResponseBody responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::vsearch::ResponseBody* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::ResponseBody >*
      mutable_responses();
  private:
  const ::vsearch::ResponseBody& _internal_responses(int index) const;
  ::vsearch::ResponseBody* _internal_add_responses();
  public:
  const ::vsearch::ResponseBody& responses(int index) const;
  ::vsearch::ResponseBody* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::ResponseBody >&
      responses() const;

  // @@protoc_insertion_point(class_scope:vsearch.SearchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::ResponseBody > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vsearch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RetCode

// .vsearch.Code state = 1;
inline void RetCode::clear_state() {
  state_ = 0;
}
inline ::vsearch::Code RetCode::_internal_state() const {
  return static_cast< ::vsearch::Code >(state_);
}
inline ::vsearch::Code RetCode::state() const {
  // @@protoc_insertion_point(field_get:vsearch.RetCode.state)
  return _internal_state();
}
inline void RetCode::_internal_set_state(::vsearch::Code value) {
  
  state_ = value;
}
inline void RetCode::set_state(::vsearch::Code value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:vsearch.RetCode.state)
}

// string msg = 2;
inline void RetCode::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetCode::msg() const {
  // @@protoc_insertion_point(field_get:vsearch.RetCode.msg)
  return _internal_msg();
}
inline void RetCode::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:vsearch.RetCode.msg)
}
inline std::string* RetCode::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:vsearch.RetCode.msg)
  return _internal_mutable_msg();
}
inline const std::string& RetCode::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void RetCode::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RetCode::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vsearch.RetCode.msg)
}
inline void RetCode::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vsearch.RetCode.msg)
}
inline void RetCode::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vsearch.RetCode.msg)
}
inline std::string* RetCode::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetCode::release_msg() {
  // @@protoc_insertion_point(field_release:vsearch.RetCode.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetCode::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:vsearch.RetCode.msg)
}

// -------------------------------------------------------------------

// Tensor

// int32 id = 1;
inline void Tensor::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::id() const {
  // @@protoc_insertion_point(field_get:vsearch.Tensor.id)
  return _internal_id();
}
inline void Tensor::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Tensor::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:vsearch.Tensor.id)
}

// int32 n = 2;
inline void Tensor::clear_n() {
  n_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::n() const {
  // @@protoc_insertion_point(field_get:vsearch.Tensor.n)
  return _internal_n();
}
inline void Tensor::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_ = value;
}
inline void Tensor::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:vsearch.Tensor.n)
}

// bytes metadata = 3;
inline void Tensor::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::metadata() const {
  // @@protoc_insertion_point(field_get:vsearch.Tensor.metadata)
  return _internal_metadata();
}
inline void Tensor::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:vsearch.Tensor.metadata)
}
inline std::string* Tensor::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:vsearch.Tensor.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& Tensor::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void Tensor::_internal_set_metadata(const std::string& value) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_metadata(std::string&& value) {
  
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vsearch.Tensor.metadata)
}
inline void Tensor::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vsearch.Tensor.metadata)
}
inline void Tensor::set_metadata(const void* value, size_t size) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vsearch.Tensor.metadata)
}
inline std::string* Tensor::_internal_mutable_metadata() {
  
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_metadata() {
  // @@protoc_insertion_point(field_release:vsearch.Tensor.metadata)
  
  return metadata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:vsearch.Tensor.metadata)
}

// int32 metadata_size = 4;
inline void Tensor::clear_metadata_size() {
  metadata_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::_internal_metadata_size() const {
  return metadata_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::metadata_size() const {
  // @@protoc_insertion_point(field_get:vsearch.Tensor.metadata_size)
  return _internal_metadata_size();
}
inline void Tensor::_internal_set_metadata_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  metadata_size_ = value;
}
inline void Tensor::set_metadata_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_metadata_size(value);
  // @@protoc_insertion_point(field_set:vsearch.Tensor.metadata_size)
}

// bytes data = 5;
inline void Tensor::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::data() const {
  // @@protoc_insertion_point(field_get:vsearch.Tensor.data)
  return _internal_data();
}
inline void Tensor::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:vsearch.Tensor.data)
}
inline std::string* Tensor::mutable_data() {
  // @@protoc_insertion_point(field_mutable:vsearch.Tensor.data)
  return _internal_mutable_data();
}
inline const std::string& Tensor::_internal_data() const {
  return data_.GetNoArena();
}
inline void Tensor::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vsearch.Tensor.data)
}
inline void Tensor::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vsearch.Tensor.data)
}
inline void Tensor::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vsearch.Tensor.data)
}
inline std::string* Tensor::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_data() {
  // @@protoc_insertion_point(field_release:vsearch.Tensor.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:vsearch.Tensor.data)
}

// int32 size = 6;
inline void Tensor::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::size() const {
  // @@protoc_insertion_point(field_get:vsearch.Tensor.size)
  return _internal_size();
}
inline void Tensor::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void Tensor::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:vsearch.Tensor.size)
}

// -------------------------------------------------------------------

// Index

// repeated .vsearch.Tensor index = 1;
inline int Index::_internal_index_size() const {
  return index_.size();
}
inline int Index::index_size() const {
  return _internal_index_size();
}
inline void Index::clear_index() {
  index_.Clear();
}
inline ::vsearch::Tensor* Index::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:vsearch.Index.index)
  return index_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::Tensor >*
Index::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:vsearch.Index.index)
  return &index_;
}
inline const ::vsearch::Tensor& Index::_internal_index(int index) const {
  return index_.Get(index);
}
inline const ::vsearch::Tensor& Index::index(int index) const {
  // @@protoc_insertion_point(field_get:vsearch.Index.index)
  return _internal_index(index);
}
inline ::vsearch::Tensor* Index::_internal_add_index() {
  return index_.Add();
}
inline ::vsearch::Tensor* Index::add_index() {
  // @@protoc_insertion_point(field_add:vsearch.Index.index)
  return _internal_add_index();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::Tensor >&
Index::index() const {
  // @@protoc_insertion_point(field_list:vsearch.Index.index)
  return index_;
}

// -------------------------------------------------------------------

// ResponseBody

// float dist = 1;
inline void ResponseBody::clear_dist() {
  dist_ = 0;
}
inline float ResponseBody::_internal_dist() const {
  return dist_;
}
inline float ResponseBody::dist() const {
  // @@protoc_insertion_point(field_get:vsearch.ResponseBody.dist)
  return _internal_dist();
}
inline void ResponseBody::_internal_set_dist(float value) {
  
  dist_ = value;
}
inline void ResponseBody::set_dist(float value) {
  _internal_set_dist(value);
  // @@protoc_insertion_point(field_set:vsearch.ResponseBody.dist)
}

// int32 VID = 2;
inline void ResponseBody::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseBody::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseBody::vid() const {
  // @@protoc_insertion_point(field_get:vsearch.ResponseBody.VID)
  return _internal_vid();
}
inline void ResponseBody::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void ResponseBody::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:vsearch.ResponseBody.VID)
}

// string metadata = 3;
inline void ResponseBody::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResponseBody::metadata() const {
  // @@protoc_insertion_point(field_get:vsearch.ResponseBody.metadata)
  return _internal_metadata();
}
inline void ResponseBody::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:vsearch.ResponseBody.metadata)
}
inline std::string* ResponseBody::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:vsearch.ResponseBody.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& ResponseBody::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void ResponseBody::_internal_set_metadata(const std::string& value) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResponseBody::set_metadata(std::string&& value) {
  
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vsearch.ResponseBody.metadata)
}
inline void ResponseBody::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vsearch.ResponseBody.metadata)
}
inline void ResponseBody::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vsearch.ResponseBody.metadata)
}
inline std::string* ResponseBody::_internal_mutable_metadata() {
  
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResponseBody::release_metadata() {
  // @@protoc_insertion_point(field_release:vsearch.ResponseBody.metadata)
  
  return metadata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseBody::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:vsearch.ResponseBody.metadata)
}

// -------------------------------------------------------------------

// SearchRequest

// int32 k = 1;
inline void SearchRequest::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::k() const {
  // @@protoc_insertion_point(field_get:vsearch.SearchRequest.k)
  return _internal_k();
}
inline void SearchRequest::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void SearchRequest::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:vsearch.SearchRequest.k)
}

// .vsearch.Tensor q = 2;
inline bool SearchRequest::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool SearchRequest::has_q() const {
  return _internal_has_q();
}
inline void SearchRequest::clear_q() {
  if (GetArenaNoVirtual() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::vsearch::Tensor& SearchRequest::_internal_q() const {
  const ::vsearch::Tensor* p = q_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vsearch::Tensor*>(
      &::vsearch::_Tensor_default_instance_);
}
inline const ::vsearch::Tensor& SearchRequest::q() const {
  // @@protoc_insertion_point(field_get:vsearch.SearchRequest.q)
  return _internal_q();
}
inline ::vsearch::Tensor* SearchRequest::release_q() {
  // @@protoc_insertion_point(field_release:vsearch.SearchRequest.q)
  
  ::vsearch::Tensor* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::vsearch::Tensor* SearchRequest::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::vsearch::Tensor>(GetArenaNoVirtual());
    q_ = p;
  }
  return q_;
}
inline ::vsearch::Tensor* SearchRequest::mutable_q() {
  // @@protoc_insertion_point(field_mutable:vsearch.SearchRequest.q)
  return _internal_mutable_q();
}
inline void SearchRequest::set_allocated_q(::vsearch::Tensor* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:vsearch.SearchRequest.q)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .vsearch.ResponseBody responses = 1;
inline int SearchResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int SearchResponse::responses_size() const {
  return _internal_responses_size();
}
inline void SearchResponse::clear_responses() {
  responses_.Clear();
}
inline ::vsearch::ResponseBody* SearchResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:vsearch.SearchResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::ResponseBody >*
SearchResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:vsearch.SearchResponse.responses)
  return &responses_;
}
inline const ::vsearch::ResponseBody& SearchResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::vsearch::ResponseBody& SearchResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:vsearch.SearchResponse.responses)
  return _internal_responses(index);
}
inline ::vsearch::ResponseBody* SearchResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::vsearch::ResponseBody* SearchResponse::add_responses() {
  // @@protoc_insertion_point(field_add:vsearch.SearchResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vsearch::ResponseBody >&
SearchResponse::responses() const {
  // @@protoc_insertion_point(field_list:vsearch.SearchResponse.responses)
  return responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vsearch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vsearch::Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vsearch::Code>() {
  return ::vsearch::Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vsearch_2eproto
